/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, "description": "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const fs = require("fs");
const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

function idGenerator() {
  // (max -min) + min
  return (Math.floor(Math.random() * (9000 + 1)) + 1000).toString();
}

// {title:"" , description:"", id:""}
app.get("/todos", (req, res) => {
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) {
      console.log(err);
      res.status(500).json("Internal Server Error");
    } else {
      const todoArr = JSON.parse(data || "[]");
      if (todoArr.length === 0) {
        res.status(200).send("NO ITEM ADDED YET");
      }
      res.status(200).json(todoArr);
    }
  });
});

app.get("/todos/:id", (req, res) => {
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    const todoArr = JSON.parse(data || "[]");
    if (todoArr.length === 0) {
      return res
        .status(200)
        .send("NO ITEM ADDED YET SO CANNOT RETRIEVE ANYTHING");
    }
    const requestedID = req.params.id;

    let result;
    for (let i = 0; i < todoArr.length; i++) {
      if (todoArr[i]["id"] === requestedID) {
        result = todoArr[i];
        break;
      }
    }
    if (result) {
      res.status(200).json(result);
    } else {
      res.status(404).json("Not Found");
    }
  });
});

app.post("/todos", (req, res) => {
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    if (err) {
      console.log(err);
      return res.status(500).send("Internal Server Error");
    }

    let arr = JSON.parse(data || "[]");
    const id = idGenerator();
    const body = req.body;

    arr.push({ id, body });

    fs.writeFile("./todos.json", JSON.stringify(arr), (err) => {
      if (err) {
        console.log(err);
        return res.status(500).send("Internal Server Error");
      }

      res.status(201).json({ id });
    });
  });
});

// In this I am handling `completed` and `description` properties of object
app.put("/todos/:id", (req, res) => {
  const requestedID = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    const todoArr = JSON.parse(data || "[]");
    if (todoArr.length === 0) {
      return res.status(200).json(`ID DOESN'T EXISTS`);
    }
    let result;
    let position;
    for (let i = 0; i < todoArr.length; i++) {
      if (todoArr[i]["id"] === requestedID) {
        result = todoArr[i];
        position = i;
        break;
      }
    }
    if (result) {
      console.log(req.body);
      todoArr[position].body.completed = req.body.completed;
      todoArr[position].body.description = req.body.description;
      console.log(todoArr);
      fs.writeFile("./todos.json", JSON.stringify(todoArr), (err) => {
        if (err) console.log(err);
      });
      res.status(200).json(todoArr[position]);
    } else {
      res.status(404).json("NOT FOUND");
    }
  });
});
app.delete("/todos/:id", (req, res) => {
  const requestID = req.params.id;
  fs.readFile("./todos.json", "utf-8", (err, data) => {
    const todoArr = JSON.parse(data || "[]");
    if (todoArr.length === 0) {
      return res
        .status(200)
        .json("Cannot delete anything because todo list is empty");
    }
    for (let i = 0; i < todoArr.length; i++) {
      if (todoArr[i]["id"] === requestID) {
        todoArr.splice(i, 1);
        fs.writeFile("./todos.json", JSON.stringify(todoArr), (err) => {
          if (err) console.log(err);
        });
        return res.status(200).json("Item deleted successfully");
      }
    }
    res.status(404).json("NOT FOUND");
  });
});

app.use((req, res) => {
  res.status(404).json('ROUTE NOT FOUND');
});

app.listen(3000);
module.exports = app;
